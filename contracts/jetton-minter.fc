;; ------------------------------------------------------------
;; FarmCoin (FARM) — Jetton minter
;; storage layout:
;;   storage#_ total_supply:Coins admin_address:MsgAddress
;;              content:^Cell jetton_wallet_code:^Cell = Storage;
;; ------------------------------------------------------------

(int, slice, cell, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
    ds~load_coins(),      ;; total_supply
    ds~load_msg_addr(),   ;; admin_address
    ds~load_ref(),        ;; content (off-chain/on-chain metadata root)
    ds~load_ref()         ;; jetton_wallet_code
  );
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) impure inline {
  set_data(
    begin_cell()
      .store_coins(total_supply)
      .store_slice(admin_address)
      .store_ref(content)
      .store_ref(jetton_wallet_code)
    .end_cell()
  );
}

;; ------------------------------------------------------------
;; Mint helper: deploy/find user wallet and forward master transfer
;; amount — TON для покрытия внутренних комиссий (перевод/деплой кошелька)
;; ------------------------------------------------------------
() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
  cell  state_init     = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
  slice to_wallet_addr = calculate_jetton_wallet_address(state_init);

  var msg = begin_cell()
    .store_uint(0x18, 6)                ;; int_msg_info, pay fees separately, revert on error
    .store_slice(to_wallet_addr)
    .store_coins(amount)                ;; TON для внутренних комиссий
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)              ;; инициализация, если кошелька ещё нет
    .store_ref(master_msg);             ;; пробрасываем оригинальное тело

  send_raw_message(msg.end_cell(), 1);  ;; mode 1
}

;; ------------------------------------------------------------
;; Internal messages handler
;; ------------------------------------------------------------
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { return (); }

  slice cs    = in_msg_full.begin_parse();
  int   flags = cs~load_uint(4);
  if (flags & 1) { return (); }        ;; bounced -> игнор

  slice sender_address = cs~load_msg_addr();
  int   op       = in_msg_body~load_uint(32);
  int   query_id = in_msg_body~load_uint(64);

  (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();

  ;; -------------------- MINT --------------------
  if (op == op::mint()) {
    throw_unless(73, equal_slices(sender_address, admin_address));  ;; только админ

    slice to_address      = in_msg_body~load_msg_addr();
    int   ton_for_fees    = in_msg_body~load_coins();
    cell  master_msg      = in_msg_body~load_ref();

    ;; достанем jetton_amount из master_msg после (op + query_id)
    slice mm = master_msg.begin_parse();
    mm~skip_bits(32 + 64);
    int jetton_amount = mm~load_coins();

    mint_tokens(to_address, jetton_wallet_code, ton_for_fees, master_msg);
    save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code);
    return ();
  }

  ;; -------------------- BURN NOTIFICATION --------------------
  if (op == op::burn_notification()) {
    int   burned      = in_msg_body~load_coins();
    slice from_owner  = in_msg_body~load_msg_addr();

    slice expected_wallet =
      calculate_user_jetton_wallet_address(from_owner, my_address(), jetton_wallet_code);
    throw_unless(74, equal_slices(expected_wallet, sender_address));

    save_data(total_supply - burned, admin_address, content, jetton_wallet_code);

    slice response_address = in_msg_body~load_msg_addr();
    if (response_address.preload_uint(2) != 0) {
      var r = begin_cell()
        .store_uint(0x10, 6)       ;; nobounce
        .store_slice(response_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::excesses(), 32)
        .store_uint(query_id, 64);
      send_raw_message(r.end_cell(), 2 + 64);  ;; mode 66: carry all remaining, ignore errors
    }
    return ();
  }

  ;; -------------------- CHANGE ADMIN --------------------
  if (op == 3) {
    throw_unless(73, equal_slices(sender_address, admin_address));
    slice new_admin = in_msg_body~load_msg_addr();
    save_data(total_supply, new_admin, content, jetton_wallet_code);
    return ();
  }

  ;; -------------------- CHANGE CONTENT --------------------
  ;; Для immutable-токена этот блок можно убрать.
  if (op == 4) {
    throw_unless(73, equal_slices(sender_address, admin_address));
    cell new_content = in_msg_body~load_ref();
    save_data(total_supply, admin_address, new_content, jetton_wallet_code);
    return ();
  }

  throw(0xffff);  ;; неизвестная операция
}

;; ------------------------------------------------------------
;; GET methods (offchain)
;; ------------------------------------------------------------
(int, int, slice, cell, cell) get_jetton_data() method_id {
  (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
  return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
  (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
  return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}
